theory ExerciseADH
begin

builtins: symmetric-encryption, diffie-hellman

rule Ltk:
  let publicComponent = 'g'^~sk in
  [ Fr(~sk) ]
  -->
  [ !Ltk($P, ~sk), !Pk($P, publicComponent), Out(publicComponent) ]

rule A_Init:
  [ !Pk($A, pkA) ]
  -->
  [ Out(<'req', $A, $B, pkA>), St_A($A, $B) ]

rule B_Init:
  let sharedKey = pkA^~sk in
  [ !Ltk($B, ~sk), !Pk($A, pkA), !Pk($B, pkB)
  , In(<'req', $A, $B, pkA>) ]
  --[ ResponderKey(sharedKey) ]->
  [ Out(<senc('ack', sharedKey), $A, $B, pkB>) ]

rule A_SendMsg:
  let sharedKey = pkB^~sk in
  [ !Ltk($A, ~sk), !Pk($B, pkB), Fr(~msg)
  , In(<encryptedAck, $A, $B, pkB>), St_A($A, $B) ]
  --[ MessageWasSent(~msg)
    , InitiatorKey(sharedKey)
    , Eq('ack', sdec(encryptedAck, sharedKey)) ]->
  [ Out(senc(~msg, sharedKey)) ]

lemma Executability:
  exists-trace
  "Ex m #t. MessageWasSent(m) @ #t"

lemma ResponderKey:
  "All k #t. ResponderKey(k) @ #t ==> not Ex #x. K(k) @ #x"

lemma InitiatorKey:
  "All k #t. InitiatorKey(k) @ #t ==> not Ex #x. K(k) @ #x"

lemma SecrecyMessage:
  "All m #t. MessageWasSent(m) @ #t ==> not Ex #x. K(m) @ #x"

restriction Eq:
  "All t1 t2 #x. Eq(t1, t2) @ #x ==> t1 = t2"

end
